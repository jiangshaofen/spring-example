<?xml version="1.0" encoding="UTF-8"?>  

<beans  xmlns="http://www.springframework.org/schema/beans"
		 xmlns:security="http://www.springframework.org/schema/security"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd">				
    <!-- 读取错误提示属性文件，实现自定义提示。
	原文件位置 spring-security-core-4.2.3.RELEASE.jar 包中 org/springframework/security/messages_zh_CN.properties 
         可以将其内容拷贝到自定义的属性文件中，修改相关的提示信息，将 basenames 属性值指向自定义属性文件
    -->
    <!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames" value="classpath:org/springframework/security/messages_zh_CN"></property>
    </bean> -->
    
    <!-- security="none"：对指定的 URL 放行，不拦截。如一些静态文件。另外放行登录 URL 避免拦截 -->
    <security:http security="none" pattern="/auth/login" />
    <security:http security="none" pattern="/auth/logout" />
    <security:http security="none" pattern="/js/**" />
    <security:http security="none" pattern="/image/**" />
    
    <security:http auto-config="false" use-expressions="true" access-decision-manager-ref="" >        
        <security:csrf disabled="true"/>
        
    	<!--
        form-login是spring security命名空间配置登录相关信息的标签,它包含如下属性：
		1. login-page 自定义登录页url,默认为/login  不要用/login，会与下面的 login-processing-url 冲突
		2. login-processing-url 登录请求拦截的url,也就是form表单提交时指定的action
		3. default-target-url 默认登录成功后跳转的url
		4. always-use-default-target 是否总是使用默认的登录成功后跳转url
		5. authentication-failure-url 登录失败后跳转的url
		6. username-parameter 用户名的请求字段 默认为userName
		7. password-parameter 密码的请求字段 默认为password
		8. authentication-success-handler-ref 指向一个AuthenticationSuccessHandler用于处理认证成功的请求,不能和default-target-url还有always-use-default-target同时使用
		9. authentication-success-forward-url 用于authentication-failure-handler-ref
		10. authentication-failure-handler-ref 指向一个AuthenticationFailureHandler用于处理失败的认证请求
		11. authentication-failure-forward-url 用于authentication-failure-handler-ref
		12. authentication-details-source-ref 指向一个AuthenticationDetailsSource,在认证过滤器中使用
		
        username-parameter：表示登录时用户名使用的是哪个参数
        password-parameter：表示登录时密码使用的是哪个参数
	    default-target-url：
	                默认情况下，在登录成功后会返回到原本受限制的页面
	                如果用户是直接请求登录页面，登录成功后默认情况下会跳转到当前应用的根路径，即欢迎页面
	    default-target-url 属性可以指定，用户直接访问登录页面并登陆成功后跳转的页面
	                如果想让用户不管是直接请求登录页面，还是通过 Spring Security 引导过来的，登录之后都跳转到指定的页面，
	                可以使用 always-use-default-target 属性为 true 来达到这一效果
	    authentication-success-handler-ref：
	                对应一个 AuthencticationSuccessHandler 实现类的引用，登录认证成功后会调用指定 AuthenticationSuccessHandler 的 onAuthenticationSuccess 方法，
	                在此方法中进行登陆成功后的处理，此时 default-target-url 失效
	    authentication-failure-url：
	                指定登录认证失败后跳转的页面，默认情况下登录失败后会返回登录页面，登录失败后跳转的页面，也需放行，否则又会被重定向到登录页面。
	    authentication-failure-handler-ref：
	                对应一个用于处理认证失败的 AuthenticationFailureHandler 实现类。
	                指定了该属性，Spring Security 在认证失败后会调用指定 AuthenticationFailureHandler 的 onAuthenticationFailure 方法对认证失败进行处理
	                此时 authentication-failure-url 属性将不再发生作用。
	                
	   spring security登录相关的过滤器
		首先应注意的一点是,spring security 3.x 默认的登录拦截URL是/j_spring_security_check,而spring security 4.x+默认拦截的URL是/login。
		在spring security中,具体处理表单登录验证的是 org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter,
		另外一个过滤器org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter用于在没有指定登录页时动态生成一个默认登录页
        -->
		<security:form-login 
			login-page="/auth/login"  
			login-processing-url="/login"
			default-target-url="/main/common"	
            authentication-failure-url="/auth/login?error=true"            
            username-parameter="username"
			password-parameter="password"			
			authentication-success-handler-ref="authenticationSuccessHandlerImpl"
			authentication-failure-handler-ref="authenticationFailureHandlerImpl" />
			
		<security:logout logout-success-url="/auth/login" logout-url="/auth/logout" invalidate-session="true" />
		
		<!-- 
       	access="hasRole('ROLE_ADMIN')"：表示拥有 ADMIN 角色的用户可以访问，否则 403。
       	hasRole('ROLE_ADMIN') 为 SpEL 表达式，必须以 ROLE_ 开头,使用表达式时需要指定http元素的use-expressions=”true”
       	
       	hasRole([role]) 返回 true 如果当前主体拥有特定角色。 
		hasAnyRole([role1,role2]) 返回 true 如果当前主体拥有任何一个提供的角色 （使用逗号分隔的字符串队列） 
		principal 允许直接访问主体对象，表示当前用户 
		authentication 允许直接访问当前 Authentication对象 从SecurityContext中获得 
		permitAll 一直返回true 
		denyAll 一直返回false 
		isAnonymous() 如果用户是一个匿名登录的用户 就会返回 true 
		isRememberMe() 如果用户是通过remember-me 登录的用户 就会返回 true 
		isAuthenticated() 如果用户不是匿名用户就会返回true 
		isFullyAuthenticated() 如果用户不是通过匿名也不是通过remember-me登录的用户时， 就会返回true。
         -->
		<!-- 设置访问所有的 URL 都必须登录 -->
        <!-- <security:intercept-url pattern="/**" access="isAuthenticated()" /> -->
        
        <security:intercept-url pattern="/auth/login" access="permitAll"/>
        <security:intercept-url pattern="/auth/logout" access="permitAll"/>
  		<security:intercept-url pattern="/main/common" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>  
        <security:intercept-url pattern="/auth/denied" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/main/admin" access="hasRole('ROLE_ADMIN')"/>
       
        <!-- 指定登陆认证成功后，用户访问未授权的 URL 将跳转的 URL ，报 403 错误-->
        <security:access-denied-handler error-page="/auth/error"/>
        
        <security:session-management session-fixation-protection="none">
	        <!-- 
	        max-sessions="1"：同一用户只能在一个浏览器登录，当尝试在其他浏览器登陆时将被拒绝
	        error-if-maximum-exceeded="true"：当设置了此属性，尝试在其他浏览器登录时，则原会话将被终止，将在新窗口建立新会话
	        -->
	        <security:concurrency-control max-sessions="1"/>
        </security:session-management>
        
    </security:http>
    
    <!-- 认证成功后的处理类 -->
    <bean id="authenticationSuccessHandlerImpl" class="com.example.security.security.auth.AuthenticationSuccessHandlerImpl"/>
    <!-- 认证失败后的处理类 -->
    <bean id="authenticationFailureHandlerImpl" class="com.example.security.security.auth.AuthenticationFailureHandlerImpl"/>
    
    <!-- 登录认证 -->
    <security:authentication-manager>
        <!-- 直接将用户名密码写在配置文件中
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="user" authorities="ROLE_USER" />
                <security:user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN" />
            </security:user-service> 
        </security:authentication-provider>
        -->
        <!-- 使用自定义的类对用户提交的密码进行加密操作，实现 UserDetailsService 接口 -->
        <security:authentication-provider user-service-ref="customUserDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
    
    <!-- 对密码进行编码 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
   	<!-- <bean id="passwordEncoder" class="org.springframework.security.crypto.password.Pbkdf2PasswordEncoder"/> -->
	<!-- <bean id="passwordEncoder" class="org.springframework.security.crypto.password.MessageDigestPasswordEncoder">
        <constructor-arg name="algorithm" value="MD5"/>
        <property name="iterations" value="10"/>
    </bean> -->
    <bean id="customUserDetailsService" class="com.example.security.security.service.CustomUserDetailsService"></bean>
      
</beans>