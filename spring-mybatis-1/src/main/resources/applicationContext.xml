<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 自动扫描服务 -->
	<context:component-scan base-package="com.example.mybatis.service" />

	<!-- 加载数据库连接配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />  <!-- 连接池最大连接数 -->
		<property name="initialSize" value="${jdbc.initialSize}" />  <!-- 初始化连接池连接数 -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />  <!-- 连接池最大空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}" />  <!-- 连接池最小空闲 -->
		<property name="maxWait" value="${jdbc.maxWait}" />  <!-- 连接最大等待时间 -->
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
		<!-- 加载mybatis配置文件 ，此处不需要 -->
		<!-- <property name="configLocation" value="classpath:mybatis-config.xml" /> -->
		<!-- 自动扫描mapper.xml文件，**表示迭代查找，如果xml与接口定义在同一目录下，则可不用配置 -->
		<!-- <property name="mapperLocations" value="classpath:com/example/mybatis/**/*.xml" /> -->
	</bean>

	<!-- 使用接口映射器 -->
	<!-- Mapper接口所在包名，Spring会自动查找其下的接口映射器，并自他们在SQL文件中定义过，则动将它们创建成MapperFactoryBean，
		 即动态的  spring bean 可在service中直接注入接口bean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- basePackage 属性是映射器接口文件的包路径，你可以使用分号或逗号 作为分隔符设置多于一个的包路径 -->
		<property name="basePackage" value="com.example.mybatis.mapper" />
		<!-- 因为会自动装配 SqlSessionFactory 或 SqlSessionTemplate, 所以没有必要去指定 SqlSessionFactory 
			或 SqlSessionTemplate, 因此可省略不配置；但是,如果你使用了一个以上的 DataSource，那么自动装配可能会失效。
			这种情况下，你可以使用sqlSessionFactoryBeanName或sqlSessionTemplateBeanName属性来设置正确的 bean名称来使用 
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> 或 
			<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" /> -->
	</bean>

	<!-- 配置数据库提供商 -->
	<bean id="vendorProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="MySQL">mysql</prop>
				<prop key="Oracle">oracle</prop>
				<prop key="DB2">db2</prop>
			</props>
		</property>
	</bean>
	<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
		<property name="properties" ref="vendorProps" />
	</bean>

	<!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 启用事务注解，在注解中指定事务传播行为 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>
